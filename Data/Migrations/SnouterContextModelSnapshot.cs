// <auto-generated />
using System;
using System.Collections.Generic;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(SnouterContext))]
    partial class SnouterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e348183a-739a-4545-b136-9c2c34000c5c"),
                            Description = "Category about vehicles and stuff",
                            Name = "Vehicles"
                        },
                        new
                        {
                            Id = new Guid("69bcf259-ffc7-4963-aac1-f9201ce08d01"),
                            Description = "Category about houses and stuff",
                            Name = "House"
                        },
                        new
                        {
                            Id = new Guid("8891ba63-37c4-4db6-aec3-a3ae82af99d1"),
                            Description = "Category about electronics and stuff",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("fc804d4c-133d-40dd-8638-981dce5402d6"),
                            Description = "Category about clothes and stuff",
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = new Guid("1a9a897a-74a7-4a1d-912c-744e7ca18ecb"),
                            Description = "Category about books and stuff",
                            Name = "Books"
                        });
                });

            modelBuilder.Entity("Data.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30342d50-73c8-40d9-933f-1870f2cefaa3"),
                            Latitude = 51.586849000000001,
                            Longitude = 4.7760230000000004,
                            Name = "Breda"
                        },
                        new
                        {
                            Id = new Guid("b17601b6-48db-4675-b9e2-20a4447ff769"),
                            Latitude = 51.555,
                            Longitude = 5.0919439999999998,
                            Name = "Tilburg"
                        },
                        new
                        {
                            Id = new Guid("bf45b4dc-dd1c-4fe0-a755-0ae45f2f9a7f"),
                            Latitude = 51.441600000000001,
                            Longitude = 5.4696999999999996,
                            Name = "Eindhoven"
                        },
                        new
                        {
                            Id = new Guid("1e512919-c076-4fc5-9976-1212701dedbb"),
                            Latitude = 51.686399999999999,
                            Longitude = 5.3033999999999999,
                            Name = "Den Bosch"
                        },
                        new
                        {
                            Id = new Guid("d9210fc0-6d6b-462a-9a06-27e2ec50d81c"),
                            Latitude = 52.370199999999997,
                            Longitude = 4.8952,
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = new Guid("9be528b0-16ce-49be-bbe3-8883e20b6b46"),
                            Latitude = 51.924399999999999,
                            Longitude = 4.4776999999999996,
                            Name = "Rotterdam"
                        },
                        new
                        {
                            Id = new Guid("a98b7436-52fe-448f-9f24-bc12a0cc22dc"),
                            Latitude = 52.090699999999998,
                            Longitude = 5.1220999999999997,
                            Name = "Utrecht"
                        },
                        new
                        {
                            Id = new Guid("e8b7a402-e75d-437a-8cd7-0603147ba228"),
                            Latitude = 53.2194,
                            Longitude = 6.5664999999999996,
                            Name = "Groningen"
                        },
                        new
                        {
                            Id = new Guid("9865943d-0e27-4930-b614-d263ce421c1c"),
                            Latitude = 50.851399999999998,
                            Longitude = 5.6901999999999999,
                            Name = "Maastricht"
                        },
                        new
                        {
                            Id = new Guid("454812b0-c50b-4394-ab7d-36ee28bb8b92"),
                            Latitude = 52.379188999999997,
                            Longitude = 4.8994309999999999,
                            Name = "Haarlem"
                        });
                });

            modelBuilder.Entity("Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isSold")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("838f979a-2b0c-4ff3-9d1f-9da4dec04aa1"),
                            BuyerId = new Guid("87390c03-e48e-4300-9030-6295319f46fd"),
                            CategoryId = new Guid("1a9a897a-74a7-4a1d-912c-744e7ca18ecb"),
                            CreatedAt = new DateTime(2023, 4, 25, 21, 46, 37, 510, DateTimeKind.Utc).AddTicks(7703),
                            Data = "{\r\n  \"name\": \"string\",\r\n  \"roles\": [\r\n    \"string\",\r\n    \"string\"\r\n  ]\r\n}",
                            Description = "First book in Harry Potter book serial",
                            ImageUrl = new List<string> { "https://cdn.ozone.hr/media/catalog/product/cache/1/image/400x498/a4e40ebdc3e371adff845072e1c73f37/h/a/a19438e622aa321a0e73f360f1f3f855/harry-potter-and-the-philosopher-s-stone-30.jpg", "https://upload.wikimedia.org/wikipedia/en/6/6b/Harry_Potter_and_the_Philosopher%27s_Stone_Book_Cover.jpg" },
                            LocationId = new Guid("1e512919-c076-4fc5-9976-1212701dedbb"),
                            Name = "Harry Potter and the philosopher's stone",
                            Price = 100.0,
                            SellerId = new Guid("87390c03-e48e-4300-9030-6295319f46fd"),
                            SubCategoryId = new Guid("cd62a6ba-dea0-4b86-8cfe-ce2e266941d3"),
                            isSold = false
                        },
                        new
                        {
                            Id = new Guid("51f0199e-a3dc-4671-91a1-78a2887f9bfd"),
                            BuyerId = new Guid("4c454ca1-7cf7-4720-aa31-490a2ca1631f"),
                            CategoryId = new Guid("1a9a897a-74a7-4a1d-912c-744e7ca18ecb"),
                            CreatedAt = new DateTime(2023, 4, 25, 21, 46, 37, 510, DateTimeKind.Utc).AddTicks(7803),
                            Data = "{\r\n  \"name\": \"string\",\r\n  \"roles\": [\r\n    \"string\",\r\n    \"string\"\r\n  ]\r\n}",
                            Description = "Second book in Harry Potter book serial",
                            ImageUrl = new List<string> { "https://shop.skolskaknjiga.hr/media/catalog/product/cache/1/image/9df78eab33525d08d6e5fb8d27136e95/1/7/173972.jpg", "https://m.media-amazon.com/images/I/91OINeHnJGL._AC_UF1000,1000_QL80_.jpg" },
                            LocationId = new Guid("1e512919-c076-4fc5-9976-1212701dedbb"),
                            Name = "Harry Potter and the chamber of secrets",
                            Price = 200.0,
                            SellerId = new Guid("4c454ca1-7cf7-4720-aa31-490a2ca1631f"),
                            SubCategoryId = new Guid("cd62a6ba-dea0-4b86-8cfe-ce2e266941d3"),
                            isSold = false
                        },
                        new
                        {
                            Id = new Guid("839dc368-8dc7-4aca-bd19-6072727c56d1"),
                            BuyerId = new Guid("c4164268-9da6-4321-a198-42d2a10f4215"),
                            CategoryId = new Guid("1a9a897a-74a7-4a1d-912c-744e7ca18ecb"),
                            CreatedAt = new DateTime(2023, 4, 25, 21, 46, 37, 510, DateTimeKind.Utc).AddTicks(7860),
                            Data = "{\r\n  \"name\": \"string\",\r\n  \"roles\": [\r\n    \"string\",\r\n    \"string\"\r\n  ]\r\n}",
                            Description = "Made out of cotton.",
                            ImageUrl = new List<string> { "https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Trousers-colourisolated.jpg/1200px-Trousers-colourisolated.jpg", "https://www.fabricsight.com/blogs/posts/fabrics-for-trousers-top-10-fabrics-for-your-trousers-complete-guide" },
                            LocationId = new Guid("1e512919-c076-4fc5-9976-1212701dedbb"),
                            Name = "Trousers",
                            Price = 150.0,
                            SellerId = new Guid("c4164268-9da6-4321-a198-42d2a10f4215"),
                            SubCategoryId = new Guid("cd62a6ba-dea0-4b86-8cfe-ce2e266941d3"),
                            isSold = false
                        },
                        new
                        {
                            Id = new Guid("46338af7-ad8b-4f99-bf07-7efe609abd4f"),
                            BuyerId = new Guid("16b7488d-f32c-4564-8d73-58b3e58e3319"),
                            CategoryId = new Guid("e348183a-739a-4545-b136-9c2c34000c5c"),
                            CreatedAt = new DateTime(2023, 4, 25, 21, 46, 37, 510, DateTimeKind.Utc).AddTicks(7891),
                            Data = "{\r\n  \"name\": \"string\",\r\n  \"roles\": [\r\n    \"string\",\r\n    \"string\"\r\n  ]\r\n}",
                            Description = "Cool mountain bike black color",
                            ImageUrl = new List<string> { "https://s3.us-east-1.amazonaws.com/craft-marinbikes/images/2020/bikes/category/header/_1200x630_fit_center-center_82_none/23-rzxr-action-65.jpg?mtime=1668448653", "https://images.immediate.co.uk/production/volatile/sites/21/2020/06/Santa-Cruz-5010-CC-X01-RSV-25-1ddbe5a.jpg?quality=90&resize=768,574" },
                            LocationId = new Guid("b17601b6-48db-4675-b9e2-20a4447ff769"),
                            Name = "Bike",
                            Price = 1000.0,
                            SellerId = new Guid("16b7488d-f32c-4564-8d73-58b3e58e3319"),
                            SubCategoryId = new Guid("b2321a2c-159d-4226-8795-016a905042c4"),
                            isSold = false
                        },
                        new
                        {
                            Id = new Guid("29ab67ea-cb02-404d-863a-643cfc989c1f"),
                            BuyerId = new Guid("bd82e3a9-1967-4fc0-8f97-0e8cc6c159a3"),
                            CategoryId = new Guid("e348183a-739a-4545-b136-9c2c34000c5c"),
                            CreatedAt = new DateTime(2023, 4, 25, 21, 46, 37, 510, DateTimeKind.Utc).AddTicks(7924),
                            Data = "{\r\n  \"name\": \"string\",\r\n  \"roles\": [\r\n    \"string\",\r\n    \"string\"\r\n  ]\r\n}",
                            Description = "Cool car black color",
                            ImageUrl = new List<string> { "https://hips.hearstapps.com/hmg-prod/images/pile-of-tires-on-white-background-royalty-free-image-672151801-1561751929.jpg?resize=2048:*    ", "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9-MO724XZahMAnTCwgdi0vc6rrPe9mlv1odARV9W0DA&s" },
                            LocationId = new Guid("b17601b6-48db-4675-b9e2-20a4447ff769"),
                            Name = "Tires",
                            Price = 10000.0,
                            SellerId = new Guid("bd82e3a9-1967-4fc0-8f97-0e8cc6c159a3"),
                            SubCategoryId = new Guid("e6e6c936-0c78-4f3b-a15e-033d41893b74"),
                            isSold = false
                        },
                        new
                        {
                            Id = new Guid("94a96698-6755-42ca-9e9c-45070d24f9fd"),
                            BuyerId = new Guid("c4164268-9da6-4321-a198-42d2a10f4215"),
                            CategoryId = new Guid("69bcf259-ffc7-4963-aac1-f9201ce08d01"),
                            CreatedAt = new DateTime(2023, 4, 25, 21, 46, 37, 510, DateTimeKind.Utc).AddTicks(7951),
                            Data = "{\r\n  \"name\": \"string\",\r\n  \"roles\": [\r\n    \"string\",\r\n    \"string\"\r\n  ]\r\n}",
                            Description = "Cool car black color",
                            ImageUrl = new List<string> { "https://hips.hearstapps.com/hmg-prod/images/pile-of-tires-on-white-background-royalty-free-image-672151801-1561751929.jpg?resize=2048:*    ", "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9-MO724XZahMAnTCwgdi0vc6rrPe9mlv1odARV9W0DA&s" },
                            LocationId = new Guid("a98b7436-52fe-448f-9f24-bc12a0cc22dc"),
                            Name = "Tires",
                            Price = 10000.0,
                            SellerId = new Guid("c4164268-9da6-4321-a198-42d2a10f4215"),
                            SubCategoryId = new Guid("bc6eb10e-12d5-42ca-9227-170b459f0a25"),
                            isSold = false
                        });
                });

            modelBuilder.Entity("Data.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2321a2c-159d-4226-8795-016a905042c4"),
                            CategoryId = new Guid("e348183a-739a-4545-b136-9c2c34000c5c"),
                            Description = "SubCatergy about bikes and stuff",
                            Name = "Bikes",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roles\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("e6e6c936-0c78-4f3b-a15e-033d41893b74"),
                            CategoryId = new Guid("e348183a-739a-4545-b136-9c2c34000c5c"),
                            Description = "SubCatergy about cars and stuff",
                            Name = "Cars",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roles\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("bc6eb10e-12d5-42ca-9227-170b459f0a25"),
                            CategoryId = new Guid("69bcf259-ffc7-4963-aac1-f9201ce08d01"),
                            Description = "SubCatergy about houses and stuff",
                            Name = "Houses",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roles\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("e6780c1f-ba68-4976-86d2-9ab5af7bdae6"),
                            CategoryId = new Guid("69bcf259-ffc7-4963-aac1-f9201ce08d01"),
                            Description = "SubCatergy about apartments and stuff",
                            Name = "Apartments",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roles\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("ac248ff7-fd37-463a-9813-40850559c4eb"),
                            CategoryId = new Guid("8891ba63-37c4-4db6-aec3-a3ae82af99d1"),
                            Description = "SubCatergy about laptops and stuff",
                            Name = "Laptops",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roles\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("27fb3205-ab14-459f-b3a3-f09dcb494ef8"),
                            CategoryId = new Guid("fc804d4c-133d-40dd-8638-981dce5402d6"),
                            Description = "SubCatergy about pants and stuff",
                            Name = "Pants",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roles\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            Id = new Guid("cd62a6ba-dea0-4b86-8cfe-ce2e266941d3"),
                            CategoryId = new Guid("1a9a897a-74a7-4a1d-912c-744e7ca18ecb"),
                            Description = "SubCatergy about books and stuff",
                            Name = "Books",
                            Schema = "{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roles\": {\r\n      \"type\": \"array\"\r\n    }\r\n  }\r\n}"
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("709c2186-413e-4ed9-a580-353784979f04"),
                            Bio = "King in the North",
                            Email = "joe.snow@gmail.com",
                            LocationId = new Guid("30342d50-73c8-40d9-933f-1870f2cefaa3"),
                            Name = "Joe Snow",
                            Password = "123456789"
                        },
                        new
                        {
                            Id = new Guid("87390c03-e48e-4300-9030-6295319f46fd"),
                            Bio = "Dev developer",
                            Email = "arnie.arny@gmail.com",
                            LocationId = new Guid("30342d50-73c8-40d9-933f-1870f2cefaa3"),
                            Name = "Arnie Arny",
                            Password = "987654321"
                        },
                        new
                        {
                            Id = new Guid("bd39f37d-f978-4c56-96a6-6e9297d61bab"),
                            Bio = "Backend <3",
                            Email = "jan.jovis@gmail.com",
                            LocationId = new Guid("b17601b6-48db-4675-b9e2-20a4447ff769"),
                            Name = "Modi Boi",
                            Password = "DrModun-06"
                        },
                        new
                        {
                            Id = new Guid("16b7488d-f32c-4564-8d73-58b3e58e3319"),
                            Bio = "Guy (I guess) named Finley",
                            Email = "finley.rivas@gmail.com",
                            LocationId = new Guid("b17601b6-48db-4675-b9e2-20a4447ff769"),
                            Name = "Finley Rivas",
                            Password = "Finley-07"
                        },
                        new
                        {
                            Id = new Guid("4c454ca1-7cf7-4720-aa31-490a2ca1631f"),
                            Bio = "Guy named Peter",
                            Email = "peter.ferguson@gmail.com",
                            LocationId = new Guid("bf45b4dc-dd1c-4fe0-a755-0ae45f2f9a7f"),
                            Name = "Peter Ferguson",
                            Password = "Peter-08"
                        },
                        new
                        {
                            Id = new Guid("c4164268-9da6-4321-a198-42d2a10f4215"),
                            Bio = "Woman named Jada",
                            Email = "jada.shea@gmail.com",
                            LocationId = new Guid("1e512919-c076-4fc5-9976-1212701dedbb"),
                            Name = "Jada Shea",
                            Password = "Jada-93"
                        },
                        new
                        {
                            Id = new Guid("bd82e3a9-1967-4fc0-8f97-0e8cc6c159a3"),
                            Bio = "Guy named Rayan",
                            Email = "rayan.mitchell@gmail.com",
                            LocationId = new Guid("d9210fc0-6d6b-462a-9a06-27e2ec50d81c"),
                            Name = "Rayan Mitchell",
                            Password = "Rayan-85"
                        });
                });

            modelBuilder.Entity("Data.Entities.Product", b =>
                {
                    b.HasOne("Data.Entities.User", "Buyer")
                        .WithMany("Purchases")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Location", "Location")
                        .WithMany("Products")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("Seller");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Data.Entities.SubCategory", b =>
                {
                    b.HasOne("Data.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasOne("Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Data.Entities.Location", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Entities.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
